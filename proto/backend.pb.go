// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

/*
Package backend is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	PongRequest
	PongResponse
	Golink
	GetGolinkRequest
*/
package backend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PongRequest struct {
}

func (m *PongRequest) Reset()                    { *m = PongRequest{} }
func (m *PongRequest) String() string            { return proto.CompactTextString(m) }
func (*PongRequest) ProtoMessage()               {}
func (*PongRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PongResponse struct {
}

func (m *PongResponse) Reset()                    { *m = PongResponse{} }
func (m *PongResponse) String() string            { return proto.CompactTextString(m) }
func (*PongResponse) ProtoMessage()               {}
func (*PongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Golink struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Golink) Reset()                    { *m = Golink{} }
func (m *Golink) String() string            { return proto.CompactTextString(m) }
func (*Golink) ProtoMessage()               {}
func (*Golink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Golink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Golink) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetGolinkRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetGolinkRequest) Reset()                    { *m = GetGolinkRequest{} }
func (m *GetGolinkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGolinkRequest) ProtoMessage()               {}
func (*GetGolinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetGolinkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PongRequest)(nil), "backend.PongRequest")
	proto.RegisterType((*PongResponse)(nil), "backend.PongResponse")
	proto.RegisterType((*Golink)(nil), "backend.Golink")
	proto.RegisterType((*GetGolinkRequest)(nil), "backend.GetGolinkRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Backend service

type BackendClient interface {
	Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error)
	GetGolink(ctx context.Context, in *GetGolinkRequest, opts ...grpc.CallOption) (*Golink, error)
	CreateGolink(ctx context.Context, in *Golink, opts ...grpc.CallOption) (*Golink, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := grpc.Invoke(ctx, "/backend.Backend/Pong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetGolink(ctx context.Context, in *GetGolinkRequest, opts ...grpc.CallOption) (*Golink, error) {
	out := new(Golink)
	err := grpc.Invoke(ctx, "/backend.Backend/GetGolink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CreateGolink(ctx context.Context, in *Golink, opts ...grpc.CallOption) (*Golink, error) {
	out := new(Golink)
	err := grpc.Invoke(ctx, "/backend.Backend/CreateGolink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Backend service

type BackendServer interface {
	Pong(context.Context, *PongRequest) (*PongResponse, error)
	GetGolink(context.Context, *GetGolinkRequest) (*Golink, error)
	CreateGolink(context.Context, *Golink) (*Golink, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Pong(ctx, req.(*PongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetGolink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGolinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetGolink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetGolink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetGolink(ctx, req.(*GetGolinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CreateGolink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Golink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CreateGolink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/CreateGolink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CreateGolink(ctx, req.(*Golink))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _Backend_Pong_Handler,
		},
		{
			MethodName: "GetGolink",
			Handler:    _Backend_GetGolink_Handler,
		},
		{
			MethodName: "CreateGolink",
			Handler:    _Backend_CreateGolink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4a, 0x4c, 0xce,
	0x4e, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x78, 0xb9,
	0xb8, 0x03, 0xf2, 0xf3, 0xd2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0xf8, 0xb8, 0x78,
	0x20, 0xdc, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x33, 0x2e, 0x36, 0xf7, 0xfc, 0x9c, 0xcc,
	0xbc, 0x6c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x30, 0x5b, 0x48, 0x82, 0x8b, 0x3d, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x09,
	0x2c, 0x0c, 0xe3, 0x2a, 0xa9, 0x71, 0x09, 0xb8, 0xa7, 0x96, 0x40, 0xb4, 0x42, 0xcd, 0xc6, 0x66,
	0x82, 0xd1, 0x7a, 0x46, 0x2e, 0x76, 0x27, 0x88, 0x53, 0x84, 0x4c, 0xb9, 0x58, 0x40, 0x76, 0x0b,
	0x89, 0xe8, 0xc1, 0xdc, 0x8a, 0xe4, 0x32, 0x29, 0x51, 0x34, 0x51, 0xa8, 0x03, 0x19, 0x84, 0x2c,
	0xb9, 0x38, 0xe1, 0x56, 0x09, 0x49, 0xc2, 0x55, 0xa1, 0x5b, 0x2f, 0xc5, 0x8f, 0x90, 0x02, 0x8b,
	0x2b, 0x31, 0x08, 0x19, 0x71, 0xf1, 0x38, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x42, 0x75, 0xa3, 0x2b,
	0xc1, 0xa2, 0x27, 0x89, 0x0d, 0x1c, 0x80, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0xd6,
	0x68, 0x5e, 0x51, 0x01, 0x00, 0x00,
}
